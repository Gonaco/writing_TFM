
[Intro to Quantum Computation power that it is based on *superposition* and *entanglement*]
In this section ...

*** Essential elements of quantum computation

Qubits and quantum gates are the basic ingredients in quantum computation theory.
As in classical computation with boolean gates and bits, quantum gates operate on the qubits to change their state and return the desired result or calculation.

**** Qubits

Qubit stands for quantum bit.
A basic unit of information founded on quantum physics laws.
Unlike a classical bit, whose state can be either ~0~ or ~1~, but like a particle; qubits are not in a fixed state -- ground or excited -- until they are measured.
A qubit's state could be either ~0~ or ~1~ or both before measuring it.
Both ground or excited states are represented in the Dirac's bra-ket notation, viz. $| 0 \rangle$ and $| 1 \rangle$ respectively.
This notation holds the algebraic axioms cite:Nielsen_2009 required to understand the quantum theory.
Prior to measurement, a qubit is described as in a probabilistic state $| \psi \rangle = \alpha | 0 \rangle + \beta | 1 \rangle$, where $\alpha, \beta \in \mathbb{C}$ are the so-called probability amplitudes.
$|\alpha|^2$ is the probability of measuring $| 0 \rangle$, $|\beta|^2$ is the probability of measuring $| 1 \rangle$ and both $\alpha$ and $\beta$ are allowed to be complex.
Dirac's notation grants the definition of the quantum states as vectors, as in eq. [[eq:state_vector_notation]].
Moreover, as we will see below, adopting Dirac's axioms will make the quantum theory accessible with classical algebra operations. 

#+NAME: eq:state_vector_notation
\begin{equation}
|\psi\rangle = \begin{bmatrix}\alpha \\ \beta \end{bmatrix}
\end{equation}

*Superposition* is easily described giving values to both $\alpha$ and $\beta$ in the same vector.
But, as soon as they are energy probabilistic states, their values are constrained to $|\alpha|^2 + |\beta|^2 = 1$.
Since quantum states can be described as vectors, one can easily see that the state of a qubit is defined by a 2-dimensional, complex and unitarian vector space.
A *Hilbert space* $\mathscr{H}$.
E.g. in eq. [[eq:example_q_vectors]] the vectors of the ground, excited and the plus superposition -- a quantum state with the same probability to measure either $|0\rangle$ or $|1\rangle$ -- states are depicted, respectively.

#+NAME: eq:example_q_vectors
\begin{equation}
|0\rangle = \begin{bmatrix}1 \\ 0 \end{bmatrix} \quad \quad |1\rangle = \begin{bmatrix}0 \\ 1 \end{bmatrix} \quad \quad |+\rangle = \frac{1}{\sqrt{2}} \begin{bmatrix}1 \\ 1 \end{bmatrix}
\end{equation}

# To visualize the quantum states -> the Bloch sphere
As soon as the vectors are 2-dimensional, complex and unitary they can also be described in phase notation (eq. [[eq:phase_not]]).
Like the complex numbers, although requiring two angles in this case.
This notation lead us to a very understandable way to visualize the quantum states, the *Bloch sphere* (fig. \ref{fig:bloch_sphere}).
A sphere of radius one which z-axis extremes represent the ground and excited states.

#+NAME: eq:phase_not
\begin{equation}
|\psi \rangle =\cos \left(\theta /2\right)|0\rangle \,+\,e^{i\phi }\sin \left(\theta /2\right)|1\rangle
\end{equation}

#+BEGIN_EXPORT latex
\begin{figure}
\centering
\begin{tikzpicture}[line cap=round, line join=round, >=Triangle]
  \clip(-2.19,-2.49) rectangle (2.66,2.58);
  \draw [shift={(0,0)}, lightgray, fill, fill opacity=0.1] (0,0) -- (56.7:0.4) arc (56.7:90.:0.4) -- cycle;
  \draw [shift={(0,0)}, lightgray, fill, fill opacity=0.1] (0,0) -- (-135.7:0.4) arc (-135.7:-33.2:0.4) -- cycle;
  \draw(0,0) circle (2cm);
  \draw [rotate around={0.:(0.,0.)},dash pattern=on 3pt off 3pt] (0,0) ellipse (2cm and 0.9cm);
  \draw (0,0)-- (0.70,1.07);
  \draw [->] (0,0) -- (0,2);
  \draw [->] (0,0) -- (-0.81,-0.79);
  \draw [->] (0,0) -- (2,0);
  \draw [dotted] (0.7,1)-- (0.7,-0.46);
  \draw [dotted] (0,0)-- (0.7,-0.46);
  \draw (-0.08,-0.3) node[anchor=north west] {$\varphi$};
  \draw (0.01,0.9) node[anchor=north west] {$\theta$};
  \draw (-1.01,-0.72) node[anchor=north west] {$\mathbf {\hat{x}}$};
  \draw (2.07,0.3) node[anchor=north west] {$\mathbf {\hat{y}}$};
  \draw (-0.5,2.6) node[anchor=north west] {$\mathbf {\hat{z}=|0\rangle}$};
  \draw (-0.4,-2) node[anchor=north west] {$-\mathbf {\hat{z}=|1\rangle}$};
  \draw (0.4,1.65) node[anchor=north west] {$|\psi\rangle$};
  \scriptsize
  \draw [fill] (0,0) circle (1.5pt);
  \draw [fill] (0.7,1.1) circle (0.5pt);
\end{tikzpicture}
\caption{The Bloch sphere}
\label{fig:bloch_sphere}
\end{figure}
#+END_EXPORT

# Multiple qubits [Entanglement, Math operation (convolution), Hilbert space increments]
But a system with just one qubit is not useful.
The power of quantum computers explodes with the number of qubits able to work with or, what is the same, the dimensions of the Hilbert space $\mathscr{H}$.
The quantum state of $n$ qubits can be represented in bra-ket notation, with a $2^n$ size.
And, therefore, they engender a Hilbert space of $2^n$ dimensions due to superposition.
The linear operator that leads to the multiple qubit's state is the *outer product*, defined as the matrix convolution of the state vectors.
The outer product is represented as $|\phi \rangle \,\langle \psi |$.
In eq. [[eq:convolution_example]] and [[eq:convolution_example_entanglement]] an example of the outer product is offered.
The second example represents the other main phenomenon in quantum physics, the *entanglement* state of two qubits ($\phi$ and $\psi$) also known as the Bell state or the Einstein-Podolsky-Rosen (EPR) pair.
#+NAME: eq:convolution_example
\begin{equation}
|+\rangle \,\langle + | = \frac{1}{\sqrt{4}} \left( \begin{bmatrix}1 \\ 1 \end{bmatrix} \otimes \begin{bmatrix}1 \\ 1 \end{bmatrix} \right) = \frac{1}{\sqrt{4}} \begin{bmatrix}1 \\ 1 \\ 1 \\ 1\end{bmatrix} 
\end{equation}

#+NAME: eq:convolution_example_entanglement
\begin{equation}
|\Phi ^{+}\rangle =\frac  {1}{\sqrt  {2}}(|0\rangle _{\phi}\otimes |0\rangle _{\psi}+|1\rangle _{\phi}\otimes |1\rangle _{\psi}) =  \frac{(|00\rangle +|11\rangle )} {\sqrt {2}}
\end{equation}


**** Quantum Operations

Quantum operations leverage the power of quantum computers enabling calculations over the qubits.
Or what is the same, enabling transformations of a Hilbert space.
One can find a parallelism with the classical computation fundamental operations, the logical operations.
As their classical siblings, the quantum operations are usually represented as gates in a circuit, a so-called quantum circuit.
Quantum operations can be described in Dirac's notation as well.
They are represented as square matrices of $2^{n} \times 2^{n}$, where $n$ is the number of qubits involved in the operation.
This matrices should be unitary respecting the qubit state vector unitary property ($|\alpha|^2 + |\beta|^2 = 1$).
They shouldn't ever change the amplitude of the state.
Therefore, quantum operations are, basically, state rotations in the Bloch sphere (fig. \ref{fig:bloch_sphere}).
Although, while implying multiple qubits, the quantum operations are more complex than just rotations, as it will be seen below.
For instance, a rotation of 180° in x-axis of the Bloch sphere is the same as an operation that changes the qubit state from $| 0 \rangle$ to $| 1 \rangle$, or viceversa.
Qubits and quantum operations interact through the *inner product*.
In order to apply some operation over a qubit state, a matrix-vector multiplication should be done.
For instance, in eq. [[eq:inner_prod_ex]] one can understand how some uniform operation $U$ is applied to a qubit with state $| \psi \rangle$.

#+NAME: eq:inner_prod_ex
\begin{equation}
U |\psi\rangle=\begin{bmatrix}u_{00}&u_{01}\\u_{10}&u_{11}\end{bmatrix} \begin{bmatrix}\alpha \\ \beta \end{bmatrix} = \begin{bmatrix}\alpha u_{00} + \beta u_{01} \\ \alpha u_{10} + \beta u_{11} \end{bmatrix}
\end{equation}

# Universal set of gates + ¿Intro to differentiation of single- and two-qubit gates?
Also comparable with the boolean gates, quantum operations can be decomposed in other set of quantum operations.
*Universal set of gates* is a set of operations able to generate any other gate by combining them cite:Nielsen_2009.
In classical computation, for example, the ~OR~ and the ~AND~ gates are able to generate any other logic gate.
In quantum computation there are several universal set of gates.
The most used one is the *Clifford+T* set, formed by the Clifford gate set -- phase shifts around the three axes, H and CNOT -- and the T gate.
In the [[id:5fc58a48-9874-45ed-94ff-095153aeea0f][Constraints of the Surface-7 and -17 chips]] section we offer a table with a universal gate set with its decomposition, particularized for the SC-7 and -17 chips which specifications will be also described in that section.
It is common to differ between single- and multiple-qubit gates, due to the complexity variation between them.
It is generally accepted to analyze the multiple-qubit gate problem in its most elemental case, that is the two-qubit gates.

***** Single-qubit gates

Single qubit gates represent quantum operations that involve just one qubit.
They are represented as a box with one input and one output, evincing that a single qubit will be the input and output of the operation.
As explained before, single-qubit gates can be represented as $2^1 \times 2^1$ square matrices that should be unitary.
Both representations of the most common single-qubit gates can be found in Table [[tab:single_q_gates]].

#+INCLUDE: single_gates_table.org::tab:single_q_gates

# Each gate explanation
The /Identity/ gate is the idling operation.
It is equivalent to no applying any operation for a cycle.
The /Pauli-x, -y and -z/ gates are 180° rotation over the x-, y- and z-axis respectively.
Eg. a qubit with state $|+\rangle$ that is equivalent to the position $\theta = \frac{\pi}{2}, \phi = 0$ in the Bloch sphere is rotated in the y-axis with a Pauli-y gate, $Y|+\rangle = \frac{i}{\sqrt{2}} \begin{bmatrix}-1 \\ 1 \end{bmatrix}$.
This resulting state is located in $\theta = \frac{\pi}{2}, \phi = \pi$, that is a 180° rotation in the Y axis.
The /Hadamard/ gate is also a 180° rotation, but over the diagonal axis between the x- and z-axes, $\frac{({\hat {x}}+{\hat {z}})}{\sqrt {2}}}$.
The /S/ and /T/ gates are also rotations over the z-axis but of 90° and 45° respectively.


***** Two-qubit gates

Two-qubit gates are quantum operations that involve two qubits at the same time.
In general, the two-qubit gates execute a single-qubit operation over one of the qubits, depending on the state of the other.
The qubits that goes through the operation is called *target*, while the other is called the *control* qubit.
The most common two-qubit gates are represented in Table [[tab:two_q_gates]].
The /CNOT/ gate is a Controlled-NOT operation or, what is the same, a Pauli-x gate that, depending on the state of the control qubit will be executed or not.
As the CNOT, the /CZ/ gate is a Controlled-Z operations that, in this case, executes a Pauli-z gate depending on the state of the control qubit.
Finally, the /SWAP/ gate "swaps" the state of two qubits.
It moves the state of one to the other and viceversa.
This gate is mostly used for routing purposes as it will be seen in the next sections.

#+INCLUDE: two_q_gates_table.org::tab:two_q_gates

*** Quantum Circuits

Quantum circuits are quantum algorithms descriptions.
As mentioned before, they are formed by quantum gates and qubits connected in circuit fashion.
As most of the algorithm description models -- no matter if classical or quantum --, quantum circuits are hardware agnostic, which is that they are not specified to any quantum device.
They are general descriptions of quantum algorithms.
Besides the circuit description model, quantum algorithms are commonly described as instruction languages like QASM (Quantum ASseMbly) cite:Nielsen_2009 or its related posterior languages -- cQASM, OpenQASM, etc.
In fig. \ref{fig:circuit_example} we present an example of a quantum circuit.
This circuit represents the quantum equivalent of a Gray encoder of six bit length.
It is composed by CNOT gates only.
An example of the Gray code is shown in \ref{fig:gray_code_example} for different number of bits ($n$).
Also, the QASM algorithm representation can be seen in Fig. \ref{code:qasm_gray_code}.
# This example will accompany us through the whole thesis as a circuit example.

#+BEGIN_EXPORT latex
\begin{figure}
    \centering

\resizebox{0.2\textwidth}{!}{
   \Qcircuit @C=1em @R=.7em {
\lstick{a} & \targ & \qw & \qw & \qw & \qw & \qw\\
\lstick{b} & \ctrl{-1} & \targ & \qw & \qw & \qw & \qw\\
\lstick{c} & \qw & \ctrl{-1} & \targ & \qw & \qw & \qw\\
\lstick{d} & \qw & \qw & \ctrl{-1} & \targ & \qw & \qw\\
\lstick{e} & \qw & \qw & \qw & \ctrl{-1} & \targ & \qw\\
\lstick{f} & \qw & \qw & \qw & \qw & \ctrl{-1} & \qw
}
}

\label{fig:circuit_example}
\caption{Gray encoder quantum circuit.}
\end{figure}
#+END_EXPORT

#+caption: Gray Code example for 3 bits.
#+NAME: fig:gray_code_example
#+ATTR_LATEX: :width 0.3\textwidth
[[file:figures/gray_code.png]]

#+BEGIN_EXPORT latex
\begin{figure}
\centering
\begin{minipage}{.45\textwidth}
#+END_EXPORT

     #+BEGIN_SRC C

     #QASM code
     
     # qubit declaration
     qubit a
     qubit b
     qubit c
     qubit d
     qubit e
     qubit f
     
     # gates declaration
     cnot b,a
     cnot c,b
     cnot d,c
     cnot e,d
     cnot f,d
     
     #+END_SRC

#+BEGIN_EXPORT latex
\caption{QASM code describing the Gray code algorithm.}
\label{code:qasm_gray_code}
\end{minipage}
\end{figure}
#+END_EXPORT

*** Quantum Error Correction (QEC) and Fault Tolerant (FT) quantum computation
:PROPERTIES:
:ID:       016d3e26-fc74-45a4-a459-1934d84c24bf
:END:

Quantum operations are faulty and qubits are not able to hold the desired state for long times, gradually rotating to another state -- the qubit decoheres.
For instance, in the case of superconducting technologies cite:O_Brien_2017, the chips bear with decoherence times of $\approx 30 \mu s$ for qubit relaxation and $\approx 60 \mu s$ for qubit dephase.
The error rates of single-qubit gates are less than 0.1% taking $> 20 ns$ to be executed, while two-qubit gates error rate is 0.6% with times of $40 ns$ and measurement error rates around 1% with execution times of $\sim 300 ns$ cite:O_Brien_2017,Versluis_2017.
This creates an undesirable environment to compute the most useful algorithms.
Therefore, in order to fight the errors generated by this behaviour, fault-tolerant (FT) and quantum error correction (QEC) mechanisms have been developed during the last years cite:Nielsen_2009.

*** BIB                                           :noexport:
bibliography:../thesis_plan.bib
bibliographystyle:plain
