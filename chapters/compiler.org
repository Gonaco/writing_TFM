
OpenQL is a framework for high-level quantum programming developed by our group.
It is able to describe both, quantum circuits and quantum devices.
The framework can be found as a library in either C++ or Python and, therefore, the circuits are described over one of these programming languages.
The quantum chips and their constrains are described in a JSON file that is imported in the circuit description.
OpenQL is able to compile quantum circuits for specific devices and export a code understandable by a quantum simulator.
One of its compiler processes are the *mapper* algorithms developed by our group.
It is also able to load different compiler configurations like the kind of scheduler, router or initial placement.
We will use OpenQL to describe the circuit and compile it for the SC-17 chip.
In Fig. \ref{code:openql_gray_code} we show an example of OpenQL code using Python that describes the Gray encoder quantum circuit (Fig. \ref{fig:circuit_example}).
More insights can be found in the [[https://github.com/QE-Lab/OpenQL][github repository]].
# Intro (what is OpenQL, advantages, abilities, ...)

#+BEGIN_EXPORT latex
\begin{figure}
\centering
\begin{minipage}{\textwidth}
#+END_EXPORT

     #+BEGIN_SRC python

from openql import openql as ql

def circuit(config_file, scheduler='ASAP', uniform_sched= 'no', mapper='base', initial_placement='no', output_dir_name='test_output', optimize='no', measurement=True, log_level='LOG_WARNING'):
    curdir = os.path.dirname(__file__)
    output_dir = os.path.join(curdir, output_dir_name)
    ql.set_option('output_dir', output_dir)
    ql.set_option('optimize', optimize)
    ql.set_option('scheduler', scheduler)
    ql.set_option('scheduler_uniform', uniform_sched)
    ql.set_option('mapper', mapper)
    ql.set_option('initialplace', initial_placement)
    ql.set_option('log_level', log_level)

    config_fn = os.path.join(curdir, config_file)

    platform  = ql.Platform('starmon', config_fn)
    sweep_points = [1,2]
    num_circuits = 1
    num_qubits = 6
    p = ql.Program('graycode6', platform, num_qubits)
    p.set_sweep_points(sweep_points, num_circuits)
    k = ql.Kernel('graycode6', platform, num_qubits)
    k.gate('cnot',[1,0])
    k.gate('cnot',[2,1])
    k.gate('cnot',[3,2])
    k.gate('cnot',[4,3])
    k.gate('cnot',[5,4])

    if measurement:
        for q in range(num_qubits):
            k.gate('measure', [q])

    p.add_kernel(k)
    p.compile()
     
     #+END_SRC

#+BEGIN_EXPORT latex
\caption{OpenQL description in python code describing the Gray code algorithm.}
\label{code:openql_gray_code}
\end{minipage}
\end{figure}
#+END_EXPORT

# #+BEGIN_EXPORT latex

# \begin{figure}
# \centering

# #+END_EXPORT

#      #+BEGIN_SRC js

# {
#    "eqasm_compiler" : "cc_light_compiler",

#    "hardware_settings": {
# 	 "qubit_number": 7,
# 	 "cycle_time" : 20,  
#      ...
#    },

#   "resources":
#    {
#     "qubits":
#     {
#       "count": 7
#     },
#     "qwgs" :
#     {
#       "count": 3,
#       "connection_map":
#       {
#         "0" : [0, 1],
#         ...
#         "2" : [5, 6]
#       }
#     },
#     "meas_units" :
#     {
#       "count": 2,
#       "connection_map":
#       {
#         "0" : [0, 2, 3, 5, 6],
#         "1" : [1, 4]
#       }
#     },
#     "edges":
#     {  
#       "count": 16,
#       "connection_map":
#       {
#         "0": [2, 10], 
#         ...
#         "15": [5, 13]
#       }
#     },
#     "detuned_qubits":
#     {     
#       "count": 7,
#       "connection_map":
#       {
#         "0": [3],
#         ...
#         "15": []
#       }
#     }
#   },
# ...
     
#      #+END_SRC


# #+BEGIN_EXPORT latex

# \caption{Example of a configuration file in JSON code that describes a quantum device characteristics and constrains}
# \label{code:json_sc7}
# \end{figure}

# #+END_EXPORT
