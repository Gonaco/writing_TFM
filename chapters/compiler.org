
[Intro]


#+caption: Compilation layers
#+NAME: fig:compilation_layers
#+ATTR_LATEX: :width \textwidth
[[file:figures/layers.png]]


****** cQASM

# Common QASM (cQASM) aims to abstract away qubit technology details
# and guarantee the interoperability between all the quantum
# compilation and simulation tools supporting this standard. Our
# vision is to enable an extensive quantum computing toolbox
# shared by all the quantum computing community.


****** OpenQL

# Intro (what is OpenQL, advantages, abilities, ...)

#+caption: OpenQL diagram
#+NAME: fig:openql
#+ATTR_LATEX: :width 0.9\textwidth
[[file:figures/openql.png]]

#+BEGIN_EXPORT latex
\begin{figure}
\centering
\begin{minipage}{\textwidth}
#+END_EXPORT

     #+BEGIN_SRC python

from openql import openql as ql
import os
import argparse

def circuit(config_file, scheduler='ASAP', uniform_sched= 'no', mapper='base', initial_placement='no', output_dir_name='test_output', optimize='no', measurement=True, log_level='LOG_WARNING'):
    curdir = os.path.dirname(__file__)
    output_dir = os.path.join(curdir, output_dir_name)
    ql.set_option('output_dir', output_dir)
    ql.set_option('optimize', optimize)
    ql.set_option('scheduler', scheduler)
    ql.set_option('scheduler_uniform', uniform_sched)
    ql.set_option('mapper', mapper)
    ql.set_option('initialplace', initial_placement)
    ql.set_option('log_level', log_level)

    config_fn = os.path.join(curdir, config_file)

    platform  = ql.Platform('starmon', config_fn)
    sweep_points = [1,2]
    num_circuits = 1
    num_qubits = 6
    p = ql.Program('graycode6', platform, num_qubits)
    p.set_sweep_points(sweep_points, num_circuits)
    k = ql.Kernel('graycode6', platform, num_qubits)
    k.gate('cnot',[1,0])
    k.gate('cnot',[2,1])
    k.gate('cnot',[3,2])
    k.gate('cnot',[4,3])
    k.gate('cnot',[5,4])

    if measurement:
        for q in range(num_qubits):
            k.gate('measure', [q])

    p.add_kernel(k)
    p.compile()
     
     #+END_SRC

#+BEGIN_EXPORT latex
\caption{OpenQL description in python code describing the Gray code algorithm.}
\label{code:openql_gray_code}
\end{minipage}
\end{figure}
#+END_EXPORT

#+BEGIN_EXPORT latex
\begin{figure}
\centering
\begin{minipage}{\textwidth}
#+END_EXPORT

     #+BEGIN_SRC js

{
   "eqasm_compiler" : "cc_light_compiler",

   "hardware_settings": {
	 "qubit_number": 7,
	 "cycle_time" : 20,  
     ...
   },

  "resources":
   {
    "qubits":
    {
      "count": 7
    },
    "qwgs" :
    {
      "count": 3,
      "connection_map":
      {
        "0" : [0, 1],
        "1" : [2, 3, 4],
        "2" : [5, 6]
      }
    },
    "meas_units" :
    {
      "count": 2,
      "connection_map":
      {
        "0" : [0, 2, 3, 5, 6],
        "1" : [1, 4]
      }
    },
    "edges":
    {  
      "count": 16,
      "connection_map":
      {
        "0": [2, 10], 
        ...
        "15": [5, 13]
      }
    },
    "detuned_qubits":
    {     
      "count": 7,
      "connection_map":
      {
        "0": [3],
        ...
        "15": []
      }
    }
  },
  "topology" : 
  {
    "x_size": 5,
    "y_size": 3,
    "qubits": 
    [ 
      { "id": 0,  "x": 1, "y": 2 },
      ...
      { "id": 6,  "x": 3, "y": 0 }
    ],
    "edges": 
    [
      { "id": 0,  "src": 2, "dst": 0 },
      ...
      { "id": 15,  "src": 4, "dst": 6 }

    ]
  },

   "instructions": {

   "measure": {
      "duration": 320,
      "latency": 0,
      "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
      "disable_optimization": false,
      "type": "readout",
      "cc_light_instr_type": "single_qubit_gate",
      "cc_light_instr": "measz",
      "cc_light_opcode": 4
   },
   "i": {
      "duration": 20,
      "latency": 0,
      "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
      "disable_optimization": false,
      "type": "mw",
      "cc_light_instr_type": "single_qubit_gate",
      "cc_light_instr": "i",
      "cc_light_opcode": 5
   },
   "x": {
      "duration": 20,
      "latency": 0,
      "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
      "disable_optimization": false,
      "type": "mw",
      "cc_light_instr_type": "single_qubit_gate",
      "cc_light_instr": "x",
      "cc_light_opcode": 6
   }

   ...

   },
    
    "gate_decomposition": {
	"cnot %0 %1": ["ym90 %1","cz %0 %1","ry90 %1"],
	"swap %0 %1": ["ym90 %1","cz %0 %1","ry90 %1", "ym90 %0","cz %1 %0","ry90 %0", "ym90 %1","cz %0 %1","ry90 %1"],
	"z %0" : ["x %0","y %0"],
    ...
    }
}

     
     #+END_SRC

#+BEGIN_EXPORT latex
\caption{JSON code that describe a quantum device characteristics and constrains}
\label{code:json_sc7}
\end{minipage}
\end{figure}
#+END_EXPORT

