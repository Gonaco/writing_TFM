

Given the different hardware implementations and technologies in Quantum Computation (superconducting, ion-trap, spin qubits, ...), it is often difficult to benchmark the usefulness or power of quantum systems. 
A *hardware-independent measure* is required to depict whether a device is able to run a quantum circuit or not.
Here is where the Quantum Volume metric appears on the scene.

The aim of Quantum Volume is to quantify the computational power of quantum devices. 
Consequently we will use it as a metric to measure the runnability of the quantum algorithms and the quantum devices -- /*"can this algorithm be run in a given device?"*/.
While the device is the basis of the Quantum Volume metric, we fix our attention on the circuit.
Our purpose is to assert how the mapping procedure affects the runnability of a given circuit and to study how the Quantum Volume is related to the probability of success.

**** Report structure                                           :noexport:

This report outlines the general definition of Quantum Volume and our studies on the quantum algorithm runnability.
The second section gives a brief overview of ...
The third section examines ...

**** Definition

In this section, we define the Quantum Volume metric as well as the insights and ideas motivated by its capabilities

***** Hardware parameters

The Quantum Volume metric considers that a quantum computer's performance mainly depends on the next hardware specifications:

- $N$. The number of physical qubits
- Quantum chip topology. The connectivity between qubits
- Maximum number of sequential gates with correctable errors. The number of gates that can be applied before errors or decoherence mask the result
- Gate set. Available hardware gate set
- Maximum number of parallel operations. Number of operations that can be run in parallel

***** Definitions and metrics

In order to understand the metric of Quantum Volume, some concepts need to be defined first. 
In this section we offer the inferred definitions from cite:Bishop_2017,Moll_2018 that are part of the rationale of Quantum Volume.


- Model algorithm. :: In the literature, Bishop et al. use the term /model algorithm/ in cite:Bishop_2017 to refer to a depth-one circuit, "constructed by random 2-qubit unitary matrix chosen uniformly over $SU (4)$ on a random pairing of the qubits". Or, what is the same, the /model algorithm/ is a /circuit unit/ of depth one defined by a combination of any single- or two-qubit gates. The mapping requirements of the device and the mapping quality is included as well. In the case that a two-qubit gate force any qubit to be routed, the gate additions will be included in the /model algorithm/. Therefore, we can say that it is device specific, as soon as it takes into account the constraints from it.

#+caption: Model algorithm example from cite:Moll_2018. Each step represents a possible combination of gates considered as /model algorithm/. Notice that step 2 requires a mapping process that is shown afterwards.
#+NAME: fig:model_alg
#+ATTR_LATEX: :width 0.7\textwidth
[[file:figures/model_algorithm.png]]


- Active qubits ($\textbf{n}$) :: Number of active qubits in a device of $N$ qubits for a given algorithm.


- Effective error rate ($\epsilon_{eff} \sim 1/(d(N) n)$). :: It defines how well a device can implement arbitrary pairwise interactions between qubits. $\epsilon_{eff}$ is the error rate per /model algorithm/, an averaged error over many realizations of depth-one circuits conformed with random combinations of single- and two-qubit gates. It encapsulates errors of both single- and two-qubit gates. And it depends not only on the gate error rates, but also on the sophistication of the scheduling algorithm responsible of mapping the /model algorithm/ to the hardware.

- Achievable circuit depth ($d(N) \simeq \frac{1}{N \epsilon_{eff}}$) :: Maximum circuit depth for which the results, after running it on some device, are correctable and useful.

# /Note that the possibility that several consecutive errors could act as the correction of that error is not take into account/.

- (General) Quantum Volume ($\tilde{V}_Q = min (N, d(N))^2$) :: quantifies the space-time volume occupied by a /model algorithm/ with random two-qubit gates that can be reliably executed on a given device.

    # $$V_Q = \max_{n \le N} \min \left[ n,\frac{1}{n \epsilon_{eff} (n)}\right]^2$$

******* Heuristic routing algorithm parameters               :noexport:

    - $(u_j, v_j)$ :: qubit pairs that interact

    - $D_0$ :: distance between $u$ and $v$ for a given connectivity graph

    - $\sum_j D(u_j,v_j)$ :: Total distance

    - $\xi_{u,v}$ :: random variable $~N(0,1/n)$
    - $D$ :: Distance Function

    $$D(u,v) = (1+|\xi_{u,v}|) D_0 (u,v)^2$$

    - $r$ :: lowest computed depth

****** Heuristic routing algorithm                            :noexport:

    Since the algorithm is randomized, we repeat $D(u,v) = (1+|\xi_{u,v}|) D_0 (u,v)^2$ and choose the lowest computed depth, $r$.
    Averaging r over many instances of the model algorithm gives the effective error rate as

    $$\epsilon_{eff} = \epsilon (\bar{r} + 1)$$

    where we assume that all SWAP gates and the needed $SU (4)$ interactions all can be done with constant error $\epsilon$.

    /Note that the algorithm is random/.

****** Insights and Criticism                                 :noexport:

    - Definitions are too vague
    - The error model is quite simplistic
    - They are not considering the different gates times
    - ...

***** Runnability

After understading the concept of Quantum Volume, we derived some insights and we had ideas motivated by the possibilities that this new metric offers. 
We define the *runnability* of a given quantum circuit on a device based on the separation of the concepts of /device/ Quantum Volume ($V_Q$) and /algorithm/ Quantum Volume ($V^a_Q$).


****** Quantum Volume of a device

Following cite:Bishop_2017,Moll_2018, we can expand the Quantum Volume general equation ($\tilde{V}_Q$) with the other definitions in the previous section and maximize for the biggest possible $n$ in the device. 
Then, the maximum Quantum Volume that a device could run is defined by:

#+NAME: eq:d_q_v
\begin{equation}
V_Q = \max_{n \le N} \min \left[ n,\frac{1}{n \epsilon_{eff} (n)}\right]^2
\end{equation}

We define this as the /device/ Quantum Volume. 
In Fig. \ref{fig:deviceQV} a graph describing the Quantum Volume as a function of $n$ and $\epsilon_{eff}$ is shown.
For this example we are not considering $\epsilon_{eff} (n)$.
Otherwise, it would be a technology specific graph.
The purpose of this figure is tho show the general behaviour of $V_Q$.
Note that the axis are in a logarithmic scale in order to show that $V_Q$ grows exponentially as $n$ increase and that $\epsilon_{eff}$ is abruptly detonating $V_Q$ growth from values smaller than $10^{-3}$.
Therefore, we outline that the main limit for the $V_Q$ is the $\epsilon_{eff}$.

# #+BEGIN_EXPORT latex
#      %\begin{figure}
     
#      %\centering
#      \begin{minipage}{.45\textwidth}

#      \centering

# #+END_EXPORT

#  [[file:figures/general_QV2.png]]
 
# #+BEGIN_EXPORT latex
#      \captionof{figure}{}
#      \label{fig:deviceQV2}

#      \end{minipage}%
#      \hspace{1cm}
#      \begin{minipage}{.45\textwidth}

# #+END_EXPORT

#  [[file:figures/general_QV1.png]]

# #+BEGIN_EXPORT latex
#      \captionof{figure}{}
#      \label{fig:deviceQV1}

#      \end{minipage}%
# #+END_EXPORT

#+caption: Device Quantum Volume behaviour for values less than 1000 qubits and a $\epsilon_eff < 10^{-5}$
#+NAME: fig:deviceQV
#+ATTR_LATEX: :width \textwidth
[[file:figures/general_QV.png]]

****** Quantum Volume of an algorithm

As with $V_Q$, we initially defined the algorithm's Quantum Volume from the general equation $\tilde{V}_Q$, although we will adapt it later.

#+NAME: eq:a_q_v_min
\begin{equation}
V_Q^a = \min \left[ n,d \right]^2
\end{equation}

Note that $d$ is not $d(N)$ but the real depth of the given algorithm.
At the same time, $n$ is the number of qubits required by the algorithm itself.
One can see how $d$ and $n$ are equally important in Fig. \ref{fig:algorithmQVsym}.
The growth of both variables causes an equally exponential growth of $V^a_Q$.

# #+BEGIN_EXPORT latex
#      %\begin{figure}
     
#      %\centering
#      \begin{minipage}{.45\textwidth}

#      \centering

# #+END_EXPORT

# # [[file:V_q_analysis2.png]] 

# file:figures/V_q_analysis_sym2.png

# #+BEGIN_EXPORT latex
#      \captionof{figure}{}
#      \label{fig:algorithmQV2sym}

#      \end{minipage}%
#      \hspace{1cm}
#      \begin{minipage}{.45\textwidth}

# #+END_EXPORT

# # [[file:V_q_analysis1.png]] 

# [[file:figures/V_q_analysis_sym1.png]]

# #+BEGIN_EXPORT latex
#      \captionof{figure}{}
#      \label{fig:algorithmQV1sym}

#      \end{minipage}%
# #+END_EXPORT

#+caption: Algorithm Quantum Volume as in eq. [[eq:a_q_v_min]] behaviour for values less than $10^{4}$ qubits and depth less than $10^{4}$
#+NAME: fig:algorithmQVsym
#+ATTR_LATEX: :width \textwidth
file:figures/V_q_analysis_sym.png

Fig. \ref{fig:algorithmQVasym} present the behaviour of $V_Q^a$
focusing in the current most common values for $n$ and $d$.
The function shows an asymteric beheviour due to $d$ is much bigger than $n$ most of the times.


# #+BEGIN_EXPORT latex
#      %\begin{figure}
     
#      %\centering
#      \begin{minipage}{.45\textwidth}

#      \centering

# #+END_EXPORT

# # [[file:V_q_analysis2.png]] 

# file:figures/V_q_analysis_asym2.png

# #+BEGIN_EXPORT latex
#      \captionof{figure}{}
#      \label{fig:algorithmQV2asym}

#      \end{minipage}%
#      \hspace{1cm}
#      \begin{minipage}{.45\textwidth}

# #+END_EXPORT

# # [[file:V_q_analysis1.png]] 

# [[file:figures/V_q_analysis_asym1.png]]

# #+BEGIN_EXPORT latex
#      \captionof{figure}{}
#      \label{fig:algorithmQV1asym}

#      \end{minipage}%
# #+END_EXPORT

#+caption: Algorithm Quantum Volume as in eq. [[eq:a_q_v_min]] behaviour for values less than 1000 qubits and a depth less than $10^{5}$
#+NAME: fig:algorithmQVasym
#+ATTR_LATEX: :width \textwidth
[[file:figures/V_q_analysis_asym.png]]

We aware that this approach has a limitation regarding the mapping of the quantum circuit.
As explained before, $V_Q$ is able to take into account the sophistication of the mapping procedure.
It is inherited in the /model algorithm/.
But, in this case, the $V^a_Q$ of an algorithm before and after mapping will remain the same.
After mapping an algorithm, the usual effect is an increase in the depth or the number of operations.
Rare mapping methods consider the qubit addition in the technique.
And, even considering it, $n$ is not often growing too much in comparison with $d$.
In the current NISQ era, the quantum circuits need much less qubits than depth.
Therefore, most of the times, the minimum value between $n$ and $d$ will be $n$.
As soon as $V^a_Q$ is taking into account the minimum of them and the mapping procedure affects mostly to $d$ we can conclude that this definition of $V^a_Q$ is not considering the mapping in its results.

A simplified solution for this problem would be the $V^a_Q$ definition as the multiplication between $n$ and $d$.
Unfortunately, this approach has several drawbacks as well.
As Moll et al. point out cite:Moll_2018, extreme cases of high $n$ and low $d$ -- or the other way around -- lead to inconsistencies of the multiplication metric.
But, considering that most of our work is not going to be in any of these extreme cases and that we can avoid those outliers, we define the algorithm's Quantum Volume as:

# It will result in higher values for devices that actually are not working that good in comparison with others that have real higher computational power.
# For instance, ...
# the current quantum systems with minimal error rates are the systems with very low amount of qubits.
# And, at the same time, this systems are not relevant in computational power, although are able to run long circuits.

#+NAME: eq:a_q_v_mult
\begin{equation}
V_Q^a =  n \times d
\end{equation}

Fig. \ref{fig:algorithmmultQV} report the behaviour of the $V_Q^a$ as
the multiplication of $n$ and $d$.
As illutrated in Fig. \ref{fig:algorithmQVsym}, the values of $n$ and $d$ are
affecting equally and exponentially to the metric.

# #+BEGIN_EXPORT latex
#      %\begin{figure}
     
#      %\centering
#      \begin{minipage}{.45\textwidth}

#      \centering

# #+END_EXPORT

# [[file:figures/V_q_analysis_mult2.png]]

# #+BEGIN_EXPORT latex
#      \captionof{figure}{}
#      \label{fig:algorithmmultQV2}

#      \end{minipage}%
#      \hspace{1cm}
#      \begin{minipage}{.45\textwidth}

# #+END_EXPORT

# [[file:figures/V_q_analysis_mult1.png]]

# #+BEGIN_EXPORT latex
#      \captionof{figure}{}
#      \label{fig:algorithmmultQV1}

#      \end{minipage}%
# #+END_EXPORT

#+caption: Algorithm Quantum Volume as in eq. [[eq:a_q_v_mult]] behaviour for values less than 1000 qubits and a depth less than $10^{5}$
#+NAME: fig:algorithmmultQV
#+ATTR_LATEX: :width \textwidth
[[file:figures/V_q_analysis_mult.png]]

******* Problem                                              :noexport:

It could be the case that one quantum circuit using more qubits than the ones available in a device has lower Quantum Volume than the one in the device. This would mean that theoretically the algorithm could be run in the quantum system, when it actually couldn't.

****** Runnability

# /"Can this device run a given algorithm?"/

Finally, once the Quantum Volume of device and algorithm are stated, we define runnability as the condition for which the $V_Q$ should be bigger than $V^a_Q$.
That is the condition that the computational power of the device should be bigger than the computational power required by the algorithm.

$$\text{Runnable if: } V_Q > V^a_Q \quad \quad \text{ when } N \ge n$$

For instance, in order to understand this concept, one may imagine the process of checking, whether or not, some cube with a given volume -- representing the algorithm -- would fit in a box -- the device --.
If the algorithm's box volume is smaller than the volume of the device's box, the algorithm's box will fit inside.

Indeed, one acceptable criticism of this definition is that, as $V_Q$ and $V^a_Q$ are finally defined in the previous sections, it seems that it is not really fair to compare them.
But, as soon as the general behaviour of the final and the initial $V^a_Q$ is the same -- one can see in the Fig. \ref{fig:algorithmQVsym} and Fig. \ref{fig:algorithmmultQV} -- and as the final definition tends to have bigger values than the initial one -- so it is defining a more restrictive and exigent scenario -- we believe that this definition of runnability is mathematically correct and useful.

Therefore, we define runnability as the condition of:

#+NAME: eq:runnability_condition
\begin{equation}
\max_{n \le N} \min \left[ n,\frac{1}{n \epsilon_{eff} (n)}\right]^2 > n \times d \quad \quad \text{ when } N \ge n
\end{equation}

****** Depict $\epsilon_{eff}(n)$                             :noexport:

/How to depict a function of $\epsilon_{eff}$ based on experiments/simulations?/

******* Bounds

With no intelligent compiler/mapping:

$$\epsilon_{eff} > \epsilon$$

******* Averaging $\epsilon_{eff}$

With several random circuits of just 1 cycle, check their fidelity and average. That would be the $\bar{\epsilon}_{eff}$.

******* Finding the real $\epsilon_{eff} (n)$

/Is not this thing kind of the error model?/

****** Near future                                            :noexport:

+Quantum Volume assumes that a square circuit ($d = \frac{1}{N \epsilon_{eff}} = N$) is the maximum a quantum device could get in term of errors.+
/Maybe is not that but the initial maximum depth calculation formula that leads you to this result/
Following that reasoning, with current devices of $\epsilon_{eff} > 10^{-3}$, the maximum $N$ will be

$$N = \sqrt{\frac{1}{\epsilon_{eff}}} = 31.623$$

**** Methodology

# # Intro of how we want to work with Quantum Volume.
# First we will calculate the Quantum Volume of a circuit (before and after mapping. We will be able to see differences because out metric is not following the Quantum Volume $min$ convention)

# +Then, without calculating any effective error rate, we will consider that the Quantum Volume of the device should be smaller than the Quantum Volume of the device.+
# +Knowing that minimum Quantum Volume for the device we can depict the minimum number of qubits or
# effective error rate required to run a certain algorithm.+

After explaining the insights and our new concepts around the metric of Quantum Volume, let us now
look at our methodology.
One issue that needs to be raised is the difficulty of the $\epsilon_{eff}$ calculation for a device.
In our work, we will try to avoid this exhausting process outlining how much computational power
is required by a given algorithm.
Or, in other words, we will calculate the $V^a_Q$ and assert that it would be able to run in devices
with $V_Q > V^a_Q$.
$V^a_Q$ will be a threshold to define the runnability of a given algorithm.

As mentioned at the beginning, we are also interested on the impact of the mapping step in the
Quantum Volume.
Because of that, we will check the differences of $V^a_Q$ in the same circuit, before and after
mapping it.
We are concerned about the relation between Quantum Volume and the probability of success, as
well.
We will analyze the results of both metrics, thus.

# After the prerequisite have been acknowledged, 
Subsequently, the design of our Quantum Volume method will follow the next stages.
First, given a quantum algorithm, we will calculate the Quantum Volume of a circuit, before and after mapping.
Then, we will compare both results and we will investigate their relationship with the probability
of success, if any.
Finally, we will outline the runnability threshold of the algorithm.

#+caption: Summary of the steps to outline the range of possible values for running a given algorithm
#+NAME: tab:methodsteps
#+ATTR_LATEX: :booktabs :environment :font \small :width \textwidth :float t :align |l|
|---------------------------------------------------------------------------------------------------------|
|                                                                                                         |
| Steps:                                                                                                  |
|                                                                                                         |
| 1. Calculation of $V^a_Q \prime$ for a given algorithm without mapping                                  |
| 2. Calculation of $V^a_Q$ for a given algorithm after being mapped with the constraints of some device   |
| 3. Compare $V^a_Q \prime$ and $V^a_Q$                                                                   |
| 4. Look for relation with probability of success                                                        |
| 5. Threshold $V_Q$ with $V^a_Q$ ($V_Q > V^a_Q$ and $N \ge n$)                                           |
|                                                                                                         |
|---------------------------------------------------------------------------------------------------------|


* BIB                                                 :ignore:thesisnoexport:

bibliography:../../thesis_plan.bib
bibliographystyle:plain
