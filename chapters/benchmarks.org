
**** Intro                                                        :ignore:
# Intro (motivation/why do we need them?) and Objective

As stated in the Introduction, the research was conducted to analyze the different metrics to assert the quality of a mapping algorithm.
Consequently, we used a classic technique, the benchmarking technique.
In general computing, a benchmark is a program or a set of programs used to assess the performance of the host technology.
In our case, a benchmark would be a quantum algorithm that we will map to the SC chips constrains and then simulate aiming to use them to understand the different metrics.


**** Methodology                                                  :ignore:
# Methodology

Under this approach, it was decided that the best methodology would be to follow four steps.
    
   1. Build algorithms list       
      1. Gather the algorithms from cite:zulehner17:effic_method_mappin_quant_circuit and cite:Lin_2014.
      2. Translate them from its QASM version to OpenQL.
   2. Algorithms profile (source, number of qubits, number of gates, gates percentage, ...).
   3. Algorithms classification.
   4. Mapping set creation


***** Build a list of quantum algorithms

# Build the algorithm list
First, we built a list of quantum algorithms as benchmarks.
We opted to collect a big variety of different algorithms from different sources and libraries with a view to classify them and select the most interesting ones afterwards.
As it is common to find in the literature [REFER ALL THE PAPERS WITH LIST OF REAL BENCHMARKS], we also decided the benchmarks should be real and useful quantum algorithms, instead of random circuits.
The sources we chose are RevLib cite:Wille_2008, ScaffCC cite:JavadiAbhari_2015, some benchmarks from Zulehner's et al. work cite:zulehner17:effic_method_mappin_quant_circuit and QLib cite:Lin_2014 because of the variety of algorithms and because they are decomposed in the Clifford+T set.
The counterpart is that the language description of the algorithms from those sources are different and any of them is the pure QASM, but OpenQASM or another altered QASM languages.
As mentioned in the introduction of this chapter and as it is shown in Section [[id:e1f45d80-b828-4cc8-b14f-72258918626f]], in order to map the algorithms we will use the OpenQL tool.
Therefore we had to translate algorithms from their QASM versions to the OpenQL notation.
We developed a parser in python in order to do that.
# Some of the quantum algorithms have arbitrary rotation gates, which decomposition is not included yet in OpenQL, so I'm not going to translate them for now.

#+caption: Amount of algorithms per source organized per the type of circuit description language used
#+NAME: tab:benchmark_amounts
#+ATTR_LATEX: :booktabs :environment :float t :align lrr
|-------------------+--------------|
| OpenQASM          | Altered QASM |
|-------------------+--------------|
| RevLib ()         | QLib ()      |
| ScaffCC ()        |              |
| other Sources (1) |              |
|-------------------+--------------|

****** Benchmarks Graph                                   :BMCOL:ignore:
    :PROPERTIES:
    :BEAMER_col: 0.6
    :END:

#+BEGIN_EXPORT latex

\begin{figure}
\centering
\resizebox{0.75\textwidth}{!}{
\begin{tikzpicture}[>=stealth',shorten >=1pt,auto,node distance=0.7cm, thick,main node/.style={}]
    \fill[orange!40] (2,2) circle (.08cm) coordinate (Z);
    \fill[cyan!30] (3,6) circle (1.6cm) coordinate (R);
    \fill[purple!50] (7,5) circle (.1cm) coordinate (S);
    \fill[teal!40] (8,2) circle (1cm) coordinate (Q);
    \draw[gray,dashed] (5,4) ellipse (6cm and 4cm) coordinate (A);
    \draw (4,0) -- coordinate (L) (10,6.4) coordinate (Le);
 %\node[main node] (1) [left of R] {RevLib};
\node[main node] at (3,6) {RevLib};
\node[main node] (2) [above of=Z] {Others from Zulehner's paper};
\node[main node] (3) [above of=S] {ScaffCC};
%\node[main node] (4) [above right of Q] {QLib};
\node[main node] at (8,2) {QLib};
\node[main node,draw] (5) [above left  of=L] {OPENQASM};
\node[main node,draw] (6) [below of=Le] {QLib QASM};
\end{tikzpicture}
}
\label{fig:benchmarks_graph}
\caption{Graph depicting the amount of benchmarks per source. The line splits the source depending on the description programming language}
\end{figure}

#+END_EXPORT

***** Algorithms profile

# Algorithms profile
The goal of this second step is to understand the algorithms we have, extracting their statistics.
We built a benchmark profile with the number of qubits used, the number of gates, the expected behaviour of the algorithm and different graphs, showing the percentage of the operations types or the number of operations running in parallel amongst others.
Most of the benchmarks are classical algorithms adapted to quantum circuits.
This means that they are not using the superposition quality as an advantage and, then, most of the results are binary.
Or what is the same, qubits in either ground or excited state, but never superposition.
As we will describe in [REFERENCE] section this will create a relaxation while computing the mapping quality.
We will assume that a correct response after simulating them would be a binary result and, therefore, a resulting superposition state would mean an error.


# - Number of different algorithms (without the decomposition): 53+3 = 56
# - The highest amount of gates: ~hwb9_119~ with 207775 gates

***** Benchmarks classification

# Algorithms classification and selection
The third step is to classify the benchmarks depending on their behaviour.
This is an important step because algorithms that do similar calculations are used to have common gates distribution.
From all the benchmarks we have, we can distinct six different classes.

- Quantum Gates: Circuits that are a decomposition of a Quantum Gate
- Search Algorithms
- Worst Cases: Circuits that were really difficult to generate for RevLib
  - HWB: is the simplest function with exponential Ordered Binary Decision Diagrams (OBDD) size.
- Encoding Functions: Classical codification functions
- Arithmetic Functions: Functions that perform an arithmetic operation
- Miscellaneous: Mix of different kind of algorithms that we do not know its expected behavior


#         #+BEGIN_EXPORT latex
# \begin{center} 
# \resizebox{0.5\textwidth}{!}{   
# \begin{tikzpicture}[sibling distance=3pt]
#   \tikzset{grow'=right,level distance=130pt}
#   \tikzset{execute at begin node=\strut}
#   \tikzset{every tree node/.style={align=center,anchor=base west}}
#   %% \tikzset{edge from parent/.style={draw,
#   %%     edge from parent path={(\tikzparentnode.east)
#   %%       -- +(0,-8pt)
#   %%       |- (\tikzchildnode)}}}
#   \tikzset{level 2/.style={level distance=120pt}}
#   %% \tikzset{level 3/.style={level distance=120pt}}
#   %% \tikzset{level 4/.style={level distance=100pt}}
#   %% \tikzset{frontier/.style={distance from root=500pt}}
#   \Tree [.{QLib Algorithms}
#     {QFT}
#     {IQFT}
#     {\textbf{Grover's Search}}
#     {Benstein-Vazirani Search}
#     [.{\textbf{Adder}}
#     {Cuccaro}
#     {Drapper}
#     {VBE}
#     ]
#     {\textbf{Quantum (Cuccaro) Multiplier}}
#     {Modular Exponential}
#     ]
#     \end{tikzpicture}
# }
# \end{center}
#     #+END_EXPORT

#     #+BEGIN_EXPORT latex
# \begin{center}    
# \begin{tikzpicture}[sibling distance=3pt]
#   \tikzset{grow'=right,level distance=130pt}
#   \tikzset{execute at begin node=\strut}
#   \tikzset{every tree node/.style={align=center,anchor=base west}}
#   %% \tikzset{edge from parent/.style={draw,
#   %%     edge from parent path={(\tikzparentnode.east)
#   %%       -- +(0,-8pt)
#   %%       |- (\tikzchildnode)}}}
#   \tikzset{level 2/.style={level distance=120pt}}
#   %% \tikzset{level 3/.style={level distance=120pt}}
#   %% \tikzset{level 4/.style={level distance=100pt}}
#   %% \tikzset{frontier/.style={distance from root=500pt}}
#   \Tree [.{Benchmarks Classes}
#     {Quantum Gates}
#     {Search Algorithms}
#     {Encoding Functions}
#     {Arithmetic Functions}
#     {Miscellaneous}
#     ]
#     \end{tikzpicture}
# \end{center}
#     #+END_EXPORT

#     #+ATTR_LATEX: :booktabs :environment :font \tiny :width \textwidth :float t :align p{2.5cm}|p{3cm}p{3cm}
#     |                      |                     |                |
#     | Quantum gates        | Miller Gate         |                |
#     |----------------------+---------------------+----------------|
#     | Search Algorithms    | Grover's Search     |                |
#     |----------------------+---------------------+----------------|
#     |                      | Decod24             |                |
#     | Encoding Functions   | Decod24 with enable |                |
#     |                      | Graycode            |                |
#     |                      | Hamming Code        |                |
#     |----------------------+---------------------+----------------|
#     |                      | 0410184             | mlp4           |
#     |                      | 1-bit Adder / rd32  | mod5adder      |
#     |                      | 4 greater than 10   | mod5d1         |
#     |                      | 4 greater than 11   | mod5d2         |
#     |                      | 4 greater than 12   | mod5mils       |
#     |                      | 4 greater than 13   | plus127mod8192 |
#     |                      | 4 greater than 4    | plus63mod4096  |
#     |                      | 4 greater than 5    | plus63mod8192  |
#     | Arithmetic Functions | 4 modulo 7          | radd           |
#     |                      | ALUs                | rd32           |
#     |                      | Check 4 modulo 5    | rd53           |
#     |                      | Cuccaro Adder       | rd73           |
#     |                      | Cuccaro Multiplier  | rd84           |
#     |                      | Drapper Adder       | root           |
#     |                      | Modulo 8/10 Counter | sqn            |


#     #+ATTR_LATEX: :booktabs :environment :font \tiny :width \textwidth :float t :align p{2.5cm}|p{2.5cm}p{3.5cm} 
#     |                      | One-Two-Three Counter | sqrt8                             |
#     |                      | VBE Adder             | squar5                            |
#     | Arithmetic Functions | dist                  | xor5                              |
#     |                      | majority              | z4                                |
#     |                      | max46                 |                                   |
#     |----------------------+-----------------------+-----------------------------------|
#     |                      | 9symml                | ex-1                              |
#     |                      | adr4                  | ex1                               |
#     |                      | aj-e11                | ex2                               |
#     |                      | C17                   | ex3                               |
#     |                      | clip                  | f2                                |
#     |                      | cm152a                | inc                               |
#     | Miscellaneous        | cm42a                 | life                              |
#     |                      | cm82a                 | misex1                            |
#     |                      | cm85a                 | pm1                               |
#     |                      | co14                  | sao2                              |
#     |                      | con1                  | sym10                             |
#     |                      | cycle10_2             | sym6                              |
#     |                      | dc1                   | sym9                              |
#     |                      | dc2                   | Unstructured Reversible Functions |
#     |                      | Hidden Weighted Bit   | 3_17                              |
#     |                      |                       | 4_49                              |


***** Benchmarks selection

The last step aims to have a small, but representative, set of benchmarks to map.
This requirement comes by the fact that simulations are long and computationally exhaustive.
In order to do that, we studied the different benchmark profiles looking for most illustrative cases.
But we also set some restrictions.
First of all, as soon as we are going to map the algorithms to the SC chips with a maximum number of 17 qubits, we need to look for the benchmarks with an amount of qubits below that.
We also want to see how different gate quantities affect the mapping.
Therefore, we need benchmarks with a number of gates as spread as possible.
And, at the same time, several benchmarks presenting the same number of gates.
We also tend to mix all the classes equally.
And we try to have the less number of the same algorithm versions as possible.
We only take the same algorithm versions for cases in which the number of qubits and the number of gates show an interesting combination.
For example, two similar algorithms which number of qubits or number of gates are very distinct as the first three selected benchmarks in Tab. [[tab:map_selected_benchs]].
Finally, benchmarks with a known functionality are preferred.

Once we had our requirements we could start the analysis and the selection afterwards.
In the next figures, from Fig. \ref{code:no_q_statistics} to Fig. \ref{code:q_gate_bench}, we show the different steps and data of the analysis in order to do the selection.
In Tab. [[tab:map_selected_benchs]] we show the final benchmark selection.
The crossed out algorithms are the ones that, after the selection, the simulation failed because of their computational requirements.

****** Restrictions                                             :ignore:

#+caption: Restriction summary of the benchmark selection
#+NAME: tab:bench_select_restrict
#+ATTR_LATEX: :booktabs :environment :float t :align |l|
|---------------------------------------------------------------------------------------------------------------|
|                                                                                                               |
| Restrictions:                                                                                                 |
|                                                                                                               |
| - # qubits < 17                                                                                               |
| - # gates as spread as possible and in the case of repeated benchmark the minimum number of gates             |
| - The less number of the same algorithm versions/classes as possible                                          |
| - The benchmarks that are repeated and have an interesting combination of No. qubits/No. gates are  preferred |
| - The benchmarks with a known functionality are preferred                                                     |
|                                                                                                               |
|---------------------------------------------------------------------------------------------------------------|
  
****** Preselection analysis                                    :ignore:

******* Initial entries                               :ignore:noexport:

690


******* Benchark amounts depending on the different possible number of qubits :ignore:

#+BEGIN_EXPORT latex

\begin{figure}
\centering

#+END_EXPORT

#+BEGIN_EXAMPLE

            Benchmarks ammount
No. qubits
3                           12
4                           12
5                           57
6                           31
7                           22
8                           16
9                           15
10                          21
11                          17
12                          14
13                          18
14                          17
15                          16
16                          14
17                          10

#+END_EXAMPLE

#+BEGIN_EXPORT latex

\label{code:no_q_statistics}
\caption{Statistics of the amount of benchmarks wit the same number of qubits}
\end{figure}

#+END_EXPORT


******* Different gate numbers for algorithms with less than 17 qubits :ignore:

[TOPLOT]

#+BEGIN_EXAMPLE

[4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 31, 33, 34, 35, 36, 37, 43, 50, 51, 52, 53, 66, 68, 69, 70, 73, 83, 84, 85, 91, 103, 107, 110, 115, 131, 132, 146, 148, 150, 151, 162, 163, 164, 173, 175, 178, 179, 194, 200, 211, 215, 217, 228, 230, 231, 233, 235, 244, 247, 251, 258, 263, 270, 272, 273, 275, 288, 290, 296, 320, 326, 328, 338, 342, 343, 395, 403, 440, 451, 467, 469, 485, 504, 555, 580, 612, 631, 650, 778, 781, 954, 986, 1043, 1206, 1221, 1291, 1336, 1776, 1914, 1993, 3009, 3073, 3213, 3439, 3888, 4813, 5321, 6050, 6723, 7630, 8763, 9462, 10223, 10619, 11414, 13658, 17159, 17936, 18852, 20112, 21504, 22445, 24379, 27126, 33827, 34881, 38046, 38577, 49829, 54766, 64283, 69380, 80480, 125362, 128744, 164416, 171840, 184864, 187112, 207775, 360618, 423488, 512064]

#+END_EXAMPLE

******* Amount of different no. of gates unique values :noexport:ignore:

157

******* Amount of becnhmarks depending on the number of qubits and gates :ignore:

#+BEGIN_EXPORT latex

\begin{figure}
\centering

#+END_EXPORT

#+BEGIN_EXAMPLE

                      Benchmarks ammount
No. qubits No. gates
3          6                           7
           7                           1
           19                          1
           20                          1
           36                          1
           50                          1
4          8                           6
           9                           2
           34                          1
           36                          1
           51                          1
           52                          1
5          4                           1
           7                           1
           10                          5
           11                          3
           18                          1
           20                          1
           21                          1
           22                          1
           23                          1
           27                          1
           35                          2
           36                          2
           37                          5
           52                          1
           53                          1
           66                          1
           68                          1
           69                          3
...                                  ...
13         128744                      1
           360618                      1
14         28                          1
           29                          8
           211                         1
           270                         1
           1776                        2
           11414                       1
           33827                       1
           38577                       1
           187112                      1
15         31                          8
           37                          1
           343                         1
           4813                        1
           7630                        1
           8763                        1
           9462                        1
           17936                       1
           171840                      1
16         33                          8
           175                         1
           272                         1
           326                         1
           485                         1
           10619                       1
           18852                       1
17         35                          8
           36                          1
           43                          1

[180 rows x 1 columns]

#+END_EXAMPLE


#+BEGIN_EXPORT latex

\label{code:q_gate_bench}
\caption{Amount of benchmarks classified by the number of gates and the number of qubits}
\end{figure}

#+END_EXPORT

******* with names                                    :ignore:noexport:

#+BEGIN_EXAMPLE

No. qubits No. gates Algorithm
3          6         benstein_vazirani_1b_secret_128 
                     benstein_vazirani_1b_secret_16  
                     benstein_vazirani_1b_secret_2   
                     benstein_vazirani_1b_secret_32  
                     benstein_vazirani_1b_secret_4   
                     benstein_vazirani_1b_secret_64  
                     benstein_vazirani_1b_secret_8   
           7         benstein_vazirani_1b_secret_1   
           19        ex-1_166                        
           20        ham3_102                        
           36        3_17_13                         
           50        miller_11                       
4          8         benstein_vazirani_2b_secret_128 
                     benstein_vazirani_2b_secret_16  
                     benstein_vazirani_2b_secret_32  
                     benstein_vazirani_2b_secret_4   
                     benstein_vazirani_2b_secret_64  
                     benstein_vazirani_2b_secret_8   
           9         benstein_vazirani_2b_secret_1   
                     benstein_vazirani_2b_secret_2   
           34        rd32-v0_66                      
           36        rd32-v1_68                      
           51        decod24-v0_38                   
           52        decod24-v2_43                   
5          4         vbeAdder_1b                     
           7         cuccaroAdder_1b                 
           10        benstein_vazirani_3b_secret_128 
                     benstein_vazirani_3b_secret_16  
                     benstein_vazirani_3b_secret_32  
                     benstein_vazirani_3b_secret_64  
...                                                       ...
15         4813      misex1_241                      
           7630      square_root_7                   
           8763      ham15_107                       
           9462      dc2_222                         
           17936     co14_215                        
           171840    urf6_160                        
16         33        benstein_vazirani_14b_secret_1  
                     benstein_vazirani_14b_secret_128
                     benstein_vazirani_14b_secret_16 
                     benstein_vazirani_14b_secret_2  
                     benstein_vazirani_14b_secret_32 
                     benstein_vazirani_14b_secret_4  
                     benstein_vazirani_14b_secret_64 
                     benstein_vazirani_14b_secret_8  
           175       cnt3-5_179                      
           272       qft_16                          
           326       ising_model_16                  
           485       cnt3-5_180                      
           10619     inc_237                         
           18852     mlp4_245                        
17         35        benstein_vazirani_15b_secret_1  
                     benstein_vazirani_15b_secret_128
                     benstein_vazirani_15b_secret_16 
                     benstein_vazirani_15b_secret_2  
                     benstein_vazirani_15b_secret_32 
                     benstein_vazirani_15b_secret_4  
                     benstein_vazirani_15b_secret_64 
                     benstein_vazirani_15b_secret_8  
           36        vbeAdder_5b                     
           43        cuccaroAdder_7b                 

#+END_EXAMPLE

****** Selected (/for now/)                                       :ignore:

43 benchmarks (with qubits numbers from 3 to 17 qubits) selected after applying the previous Restrictions to the analysis of the benchmarks described in the next section.

After simulating the algorithms, some of them either return errors (segmentation fault) or are computationally exhausting to simulate them as they should be simulated.

#+caption: Table of the selected benchmarks to be mapped. Note that the crossed ones mean that they were to computationally exhaustive and the simulations failed.
#+NAME: tab:map_selected_benchs
#+ATTR_LATEX: :booktabs :environment :float t :align lll
|------------+-----------+----------------------------------|
| No. qubits | No. gates | Algorithm                        |
|------------+-----------+----------------------------------|
|          5 |        27 | ~4gt11_82~                         |
|          6 |       228 | ~4gt12-v1_89~                      |
|          6 |       258 | ~4gt4-v0_72~                       |
|          7 |        70 | ~4mod5-bdd_287~                    |
|          5 |        20 | ~4mod5-v0_20~                      |
|          7 |        84 | ~alu-bdd_288~                      |
|          5 |        36 | ~alu-v0_27~                        |
|         17 |        35 | ~benstein_vazirani_15b_secret_128~ |
|         16 |       175 | +~cnt3-5_179~+                     |
|          5 |         7 | ~cuccaroAdder_1b~                  |
|          7 |        11 | ~cuccaroMultiplier_1b~             |
|          6 |        73 | ~decod24-bdd_294~                  |
|          6 |       338 | ~decod24-enable_126~               |
|          6 |         5 | ~graycode6_47~                     |
|         13 |    360618 | +~ground_state_estimation_10~+     |
|          3 |        16 | ~grover_orcl_toff~                 |
|          3 |        20 | ~ham3_102~                         |
|          5 |       233 | ~hwb4_49~                          |
|         10 |       200 | +~ising_model_10~+                 |
|         11 |     22445 | +~life_238~+                       |
|          3 |        50 | ~miller_11~                        |
|          5 |       288 | ~mini-alu_167~                     |
|         10 |       173 | +~mini_alu_305~+                   |
|          5 |       178 | ~mod10_176~                        |
|          6 |       555 | ~mod5adder_127~                    |
|          5 |        22 | ~mod5d1_63~                        |
|          6 |       440 | ~mod8-10_177~                      |
|          5 |       132 | ~one-two-three-v1_99~              |
|          5 |        70 | ~one-two-three-v3_101~             |
|         13 |    128744 | +~plus63mod4096_163~+              |
|         10 |       110 | +~qft_10~+                         |
|          4 |        34 | ~rd32-v0_66~                       |
|          6 |       781 | ~sf_274~                           |
|          6 |       778 | ~sf_276~                           |
|         12 |      4792 | ~shor_15~                          |
|         12 |      3009 | ~sqrt8_260~                        |
|         13 |      1993 | +~squar5_261~+                     |
|         15 |      7630 | +~square_root_7~+                  |
|          7 |      3888 | ~sym6_145~                         |
|         14 |       270 | +~sym6_316~+                       |
|          8 |     80480 | +~urf2_152~+                       |
|          8 |     20112 | +~urf2_277~+                       |
|          8 |        12 | ~vbeAdder_2b~                      |
|          6 |         7 | ~xor5_254~                         |
|------------+-----------+----------------------------------|



***** Github repository

Finally, all this information is detailed in the [[https://github.com/QE-Lab/qbench][qbench Github repo]] where one can find all the benchmarks, as well.


    
**** BIB                                                 :ignore:noexport:

bibliography:../thesis_plan.bib
bibliographystyle:plain
