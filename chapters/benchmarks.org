
**** Intro                                                        :ignore:
# Intro (motivation/why do we need them?) and Objective

As stated in the Introduction, the research was conducted to analyze the different metrics to assess the quality of a mapping algorithm.
To this purpose, we selected a set of quantum algorithms available in the literature.

# Build the algorithm list
We built a list of quantum algorithms coming from different sources.
The sources we chose are RevLib cite:Wille_2008, ScaffCC cite:JavadiAbhari_2015, some benchmarks from Zulehner's et al. work cite:zulehner17:effic_method_mappin_quant_circuit and QLib cite:Lin_2014 because of the variety of algorithms and because they are already decomposed in the Clifford+T set.
Note the language used to describe the algorithm varies from source to source.
Although, they all are a QASM-based language, there are small syntax differences.
As we will explain the next section, we will use our own programming languages -- OpenQL -- and compiler.
Therefore we had to translate algorithms from their QASM versions to the OpenQL notation.
We developed a parser in order to do that.
# # Some of the quantum algorithms have arbitrary rotation gates, which decomposition is not included yet in OpenQL, so I'm not going to translate them for now.

# Algorithms profile
We also built a benchmark profile that includes: the number of qubits of the algorithm, the number of gates, the functionality of the algorithm and different graphs, showing the percentage of the operations types or the degree of parallelism of the algorithm.
Most of the benchmarks are classical algorithms adapted to quantum circuits.
They are deterministic and the result it is always the same if there are no errors.
This means that their results are always binary.
Or what is the same, qubits in either ground or excited state, but never superposition.

# - Number of different algorithms (without the decomposition): 53+3 = 56
# - The highest amount of gates: ~hwb9_119~ with 207775 gates


# Algorithms classification and selection
The benchmarks were also classified depending on their functionality.
This is an important step because algorithms that do similar calculations are used to have common gates distribution.
From all the benchmarks we have, we can distinct six different classes.

- Quantum Gates: Circuits that are a decomposition of a Quantum Gate
- Search Algorithms
- Worst Cases: Circuits that were really difficult to generate for RevLib
  - HWB: is the simplest function with exponential Ordered Binary Decision Diagrams (OBDD) size.
- Encoding Functions: Classical codification functions
- Arithmetic Functions: Functions that perform an arithmetic operation
- Miscellaneous: Mix of different kind of algorithms

We came up with a list of 84 different algorithms -- 697 benchmarks taking into account the different versions of the same functionality -- that can be found in the [[https://github.com/QE-Lab/qbench][qbench Github repo]], as well as the previous information much more detailed.
These algorithms cannot only be used for the mapping problem but also for the other activities in our group.

***** Benchmark selection

In order to have a small, but representative, set of benchmarks to map, we selected just some of them.
This requirement comes by the fact that simulations are long and computationally exhaustive.
In order to do that, we studied the different benchmark profiles looking for most illustrative cases.
But we also set some restrictions.
First of all, as soon as we are going to map the algorithms to the SC chips with a maximum number of 17 qubits, we need to look for the benchmarks with an amount of qubits below that.
We also want to see how different gate quantities affect the mapping.
Therefore, we need benchmarks with a number of gates as spread as possible.
And, at the same time, several benchmarks presenting the same number of gates.
We also tend to mix all the classes equally.
And we try to have the less number of the same algorithm versions as possible.
We only take the same algorithm versions for cases in which the number of qubits and the number of gates show an interesting combination.
For example, two similar algorithms which number of qubits or number of gates are very distinct as the first three selected benchmarks in Tab. \ref{tab:map_selected_benchs}.

Once we had our requirements we could start the analysis and the selection afterwards.
In Tab. \ref{tab:map_selected_benchs} we show the final benchmark selection.

****** Restrictions                                             :ignore:

#+caption: Restriction summary of the benchmark selection
#+NAME: tab:bench_select_restrict
#+ATTR_LATEX: :booktabs :environment :float t :align |l|
|---------------------------------------------------------------------------------------------------------------|
|                                                                                                               |
| Restrictions:                                                                                                 |
|                                                                                                               |
| - # qubits < 17                                                                                               |
| - # gates as spread as possible and in the case of repeated benchmark the minimum number of gates             |
| - The less number of the same algorithm versions/classes as possible                                          |
| - The benchmarks that are repeated and have an interesting combination of No. qubits/No. gates are  preferred |
|                                                                                                               |
|---------------------------------------------------------------------------------------------------------------|
  

****** Selected (/for now/)                                       :ignore:

43 benchmarks (with qubits numbers from 3 to 17 qubits) selected after applying the previous Restrictions to the analysis of the benchmarks described in the next section (see Table \ref{tab:map_selected_benchs}).
After simulating the algorithms, few of them returned errors (segmentation fault) and some others .

# #+caption: Table of the selected benchmarks to be mapped. Note that the crossed ones mean that they were to computationally exhaustive and the simulations failed.
# #+NAME: tab:map_selected_benchs
# #+ATTR_LATEX: :booktabs :environment :float t :font \small :align lll
# |------------+-----------+----------------------------------|
# | No. qubits | No. gates | Algorithm                        |
# |------------+-----------+----------------------------------|
# |          5 |        27 | ~4gt11_82~                         |
# |          6 |       228 | ~4gt12-v1_89~                      |
# |          6 |       258 | ~4gt4-v0_72~                       |
# |          7 |        70 | ~4mod5-bdd_287~                    |
# |          5 |        20 | ~4mod5-v0_20~                      |
# |          7 |        84 | ~alu-bdd_288~                      |
# |          5 |        36 | ~alu-v0_27~                        |
# |         17 |        35 | ~benstein_vazirani_15b_secret_128~ |
# |         16 |       175 | +~cnt3-5_179~+                     |
# |          5 |         7 | ~cuccaroAdder_1b~                  |
# |          7 |        11 | ~cuccaroMultiplier_1b~             |
# |          6 |        73 | ~decod24-bdd_294~                  |
# |          6 |       338 | ~decod24-enable_126~               |
# |          6 |         5 | ~graycode6_47~                     |
# |         13 |    360618 | +~ground_state_estimation_10~+     |
# |          3 |        16 | ~grover_orcl_toff~                 |
# |          3 |        20 | ~ham3_102~                         |
# |          5 |       233 | ~hwb4_49~                          |
# |         10 |       200 | +~ising_model_10~+                 |
# |         11 |     22445 | +~life_238~+                       |
# |          3 |        50 | ~miller_11~                        |
# |          5 |       288 | ~mini-alu_167~                     |
# |         10 |       173 | +~mini_alu_305~+                   |
# |          5 |       178 | ~mod10_176~                        |
# |          6 |       555 | ~mod5adder_127~                    |
# |          5 |        22 | ~mod5d1_63~                        |
# |          6 |       440 | ~mod8-10_177~                      |
# |          5 |       132 | ~one-two-three-v1_99~              |
# |          5 |        70 | ~one-two-three-v3_101~             |
# |         13 |    128744 | +~plus63mod4096_163~+              |
# |         10 |       110 | +~qft_10~+                         |
# |          4 |        34 | ~rd32-v0_66~                       |
# |          6 |       781 | ~sf_274~                           |
# |          6 |       778 | ~sf_276~                           |
# |         12 |      4792 | ~shor_15~                          |
# |         12 |      3009 | ~sqrt8_260~                        |
# |         13 |      1993 | +~squar5_261~+                     |
# |         15 |      7630 | +~square_root_7~+                  |
# |          7 |      3888 | ~sym6_145~                         |
# |         14 |       270 | +~sym6_316~+                       |
# |          8 |     80480 | +~urf2_152~+                       |
# |          8 |     20112 | +~urf2_277~+                       |
# |          8 |        12 | ~vbeAdder_2b~                      |
# |          6 |         7 | ~xor5_254~                         |
# |------------+-----------+----------------------------------|



    
**** BIB                                                 :ignore:noexport:

bibliography:../thesis_plan.bib
bibliographystyle:plain
