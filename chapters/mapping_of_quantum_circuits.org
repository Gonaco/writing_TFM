
# Intro (what is mapping)
# Given a quantum circuit representation that is hardware agnostic, adapt it to the requirements of a real quantum processor.
As it was described in the [LINK TO THE SECTION DESCRIBING THE FULL STACK] the mapping step is a critical part of the process to run quantum algorithms.
Quantum algorithms can be described by quantum circuits, that are hardware agnostic and assume any interaction between qubits possible.
They assume the qubits are all-to-all connected.
However, quantum chips have limitations ([[id:5fc58a48-9874-45ed-94ff-095153aeea0f][Constraints of the Surface-7 and -17 chips]]).
One of the main constraints is the Nearest Neighbor (NN) constraint.
Instead of connected in an all-to-all fashion, the qubits are arranged in a two-dimensional grid shape, connecting each qubit to other four qubits -- its neighbours.
Then, the circuits need a transformation in order to be executed in real quantum device.
This transformation is the so-called mapping process.

The mapping process adapts a quantum circuit representation to the requirements of a real quantum processor.
It brings ideal algorithms down to earth, to the limitations of the quantum chips.
Therefore, the mapping accounts for the realization of quantum algorithms in quantum chips.
In order to this, the qubits states need to switch places between them -- introducing SWAP gates -- whenever an interaction between two qubits that are not NN is required. 
But, as explained in the previous section ([[id:016d3e26-fc74-45a4-a459-1934d84c24bf]]), quantum gates are faulty and the longer a circuit is the more errors appear.
Then, the extra addition of gates or the circuit depth increment due to the mapping task causes quantum algorithms to accumulate error and result in noisy or even useless results.
Therefore, the optimal mapping would be the one that alters the least the original circuit.
In order to address the mapping problem, we split it in three steps: *scheduling*, *initial placement* and *routing*.
These steps can be executed several times, or even continuously, and in any order, depending on the mapping approach.

***** Initial placement

# [INITIAL PLACEMENT DEFINITION].
Throughout this thesis we use the terms */virtual/ qubits* and */physical/ qubits* referring to the qubits from the circuit we would be to map to the real qubits of the quantum chip, respectively.
The initial placement task is responsible to relate the virtual qubits with the physical ones finding the best 
As one can see in the example below, an optimal initial placement may help to reduce the number of SWAP gates introduced by the routing step.

***** Routing

# [ROUTING DEFINITION]
The routing process accounts for finding the best path between two qubits far away in the chip layout that need to interact.
It introduces the SWAP gates to move the qubit states from one point to another.
Therefore, it is a decisive step in order to reduce the number of added gates to the circuit.
# Then, the routed best path is the one that introduces the less number of gates to the overall circuit.
# It could be the case that the best path for some two-qubit gate would introduce the least number of operations for this operation but it could make the overall circuit bigger.
# Eg. let us consider three qubits far away-- $q_1, q_2, q_3$ -- and two operations, ~CNOT q1,q2~ and ~CNOT q1,q3~.
# The three qubits are far away from each other and $q_1$ is located between $q_2$ and $q_3$.
# It could be the case that a mapping algorithm decides that the best path for the first operation is to swap $q_1$ close to $q_2$, but that would make the path to $q_3$ -- the next operation -- longer.
# On the contrary, if the mapping algorithm would decide to move $q_2$ closer to $q_1$, it would make the overall number of added gates much smaller.
# We will appreciate the behaviour of the initial placement and the routing steps as an example in the next subsection ([[id:d1e90d41-ecaa-46b4-9f20-7a7726caa34a][Mapping example]]).

***** Scheduling

# [SCHEDULING DEFINITION].
# [MAIN SCHEDULING TYPES (ALAP, ASAP)]
A scheduler organizes the circuit operations through the circuit time,
finding whether several operations can be executed in parallel -- at the same time -- or not.
It is possible to schedule in different configurations, for instance As Soon As Possible (*ASAP*) or As Late As Possible (*ALAP*), depending on the mapping requirements.
As an example of scheduling, let's consider the circuit in Fig. \ref{fig:scheduling_ex}
Notice that, in the example, there are several combinations of parallel operations.
Depending on the scheduling configuration,
the operations will be spread along the circuit in one way or the other.

# [DEPENDENCE GRAPH (EXPLANATION, EXAMPLE)]
# It is really convenient while scheduling and finding the parallel operations.
A dependence graph is a graph that relates qubits and gates sequentially.
Starting from the qubits, it chains all the gates with them.
It is really convenient while mapping, mostly scheduling and finding the parallel operations.
Fig. \ref{fig:dependence_graph_ex} shows the dependence graph of the circuit in Fig. \ref{fig:scheduling_ex} as an example.
One can see how the gates that are in the same column -- SWAP and CNOT, H and X -- can run in parallel.



# the general settings of our mapping algorithm is described in the [[id:0a029c29-40ea-42ab-ad65-250a5a76bb49][Mapping model]] section.    


*** Mapping example
:PROPERTIES:
:ID:       d1e90d41-ecaa-46b4-9f20-7a7726caa34a
:END:

**** Example definition                                           :ignore:

In order to illustrate the mapping steps let us consider the following circuit (see Fig. \ref{fig:map_ex_circ}) and the device's chip layout in Fig. \ref{fig:map_ex_chip}, we need to map the quantum circuit to its requirements.
The mapping flow that we will follow starts with a scheduler, then we set the initial placement, route and, finally, we re-schedule in order to make all the gate additions as parallel as possible.
As illustrated in the dependence graph of Fig. \ref{fig:map_ex_depend}, there are no parallel gates.
No better schedule is possible.
Considering the gate times for this device the same ones as the ones described in Tab. \ref{uni_set_gatetime}, the latency of this circuit is 400ns already.

#+BEGIN_EXPORT latex

\begin{figure}[H]
\centering
\subfigure[Gray code circuit to map]{
\input{figures/map_ex_circuit}
\label{fig:map_ex_circ}
}

\subfigure[Dependence graph of the circuit]{
\input{figures/map_ex_depend}
\label{fig:map_ex_depend}
}


\subfigure[Chip layout where to map the example circuit]{
\input{figures/map_ex_chip}
\label{fig:map_ex_chip}
}


\label{fig:map_ex_def}
\caption{Mapping example draft}
\end{figure}

#+END_EXPORT

**** Optimal approach                                    :ignore:

With an optimal initial placement, we can observe that the circuit could be the same without adding any gate.
No routing would be required.

#+BEGIN_EXPORT latex

\begin{figure}[H]
\centering
\subfigure[Optimal initial placement]{
%\resizebox{.3\textwidth}{!}{
     \Qcircuit @C=1em @R=.7em {
     \lstick{a \to Q_0} & \targ & \qw & \qw & \qw & \qw & \qw\\
\lstick{b \to Q_2} & \ctrl{-1} & \targ & \qw & \qw & \qw & \qw\\
\lstick{c \to Q_5} & \qw & \ctrl{-1} & \targ & \qw & \qw & \qw\\
\lstick{d \to Q_3} & \qw & \qw & \ctrl{-1} & \targ & \qw & \qw\\
\lstick{e \to Q_1} & \qw & \qw & \qw & \ctrl{-1} & \targ & \qw\\
\lstick{f \to Q_4} & \qw & \qw & \qw & \qw & \ctrl{-1} & \qw
}
%}
\label{fig:map_ex_circ_optim}
}

\subfigure[Chip layout with the qubits with optimal initial placement]{
     \resizebox{0.45\textwidth}{!}{%
     \begin{tikzpicture}[x=5mm,y=5mm]
 % \tikzstyle{every node} = [circle, fill=gray!30]
 % \node [green] at (0,0) {[circle, fill=gray!30]};
 \draw node[fill=cyan,circle,minimum size=0.3cm] at (0,0) {};
 % \node [cyan] at (10,0) {\textbullet};
 \draw node[fill=cyan,circle,minimum size=0.3cm] at (10,0) {};
 % \node [green] at (20,0) {\textbullet};
 \draw node[fill=cyan,circle,minimum size=0.3cm] at (20,0) {};
 % \node [red] at (5,5) {\textbullet};
 \draw node[fill=cyan,circle,minimum size=0.3cm] at (5,5) {};
 % \node [red] at (5,-5) {\textbullet};
 \draw node[fill=cyan,circle,minimum size=0.3cm] at (5,-5) {};
 % \node [red] at (15,5) {\textbullet};
 \draw node[fill=cyan,circle,minimum size=0.3cm] at (15,5) {};
 % \node [red] at (15,-5) {\textbullet};
 \draw node[fill=cyan,circle,minimum size=0.3cm] at (15,-5) {};

 \node [purple] at (2,0) {\textbf{b} $\to$ \textbf{2}};
 \node [purple] at (12,0) {\textbf{d} $\to$ \textbf{3}};
 \node [purple] at (22,0) {\textbf{f} $\to$ \textbf{4}};
 \node [purple] at (7,5) {\textbf{a} $\to$ \textbf{0}};
 \node [purple] at (7,-5) {\textbf{c} $\to$ \textbf{5}};
 \node [purple] at (17,5) {\textbf{e} $\to$ \textbf{1}};
 \node [purple] at (17,-5) {\textbf{6}};

 % \draw[{Circle[red]}-Latex] (0,0) -- (2,0);
 \draw[-Latex] (0.1, 0.4)  -- (4.6,4.9);
 %% \draw[-Latex] (0.1, 0.4)  -- (4.6,4.9)   node [midway, above, sloped] {0};
 %% \draw[-Latex] (4.8,4.7)   -- (0.3,0.2)  node [midway, below, sloped] {8};

 \draw[-Latex] (5.4, 4.9)   -- (9.9,0.4);
%%  \draw[-Latex] (5.4, 4.9)   -- (9.9,0.4)  node [midway, above, sloped] {1};
%%  \draw[-Latex] (9.7,0.2) -- (5.2,4.7)   node [midway, below, sloped] {9};

 \draw[-Latex] (10.1,0.4)  -- (14.6,4.9);
%%  \draw[-Latex] (10.1,0.4)  -- (14.6,4.9)  node [midway, above, sloped] {2};
%%  \draw[-Latex] (14.8,4.7)  -- (10.3,0.2) node [midway, below, sloped] {10};

 \draw[-Latex] (15.4, 4.9)  -- (19.9,0.4);
%%  \draw[-Latex] (15.4, 4.9)  -- (19.9,0.4)  node [midway, above, sloped] {3};
%%  \draw[-Latex] (19.7,0.2) -- (15.2,4.7)  node [midway, below, sloped] {11};

\draw[-Latex] (4.7,-4.8) -- (0.2,-0.3);
%%  \draw[-Latex] (0.4,-0.1) -- (4.9,-4.6)  node [midway, above, sloped] {4};
%%  \draw[-Latex] (4.7,-4.8) -- (0.2,-0.3)  node [midway, below, sloped] {12};

\draw[-Latex] (9.8, -0.3) -- (5.3, -4.8);
%%  \draw[-Latex] (5.1, -4.6) -- (9.6,-0.1) node [midway, above, sloped] {5};
%%  \draw[-Latex] (9.8, -0.3) -- (5.3, -4.8) node [midway, below, sloped] {13};

\draw[-Latex] (14.7,-4.8) -- (10.2,-0.3);
%%  \draw[-Latex] (10.4,-0.1) -- (14.9,-4.6) node [midway, above, sloped] {6};
%%  \draw[-Latex] (14.7,-4.8) -- (10.2,-0.3) node [midway, below, sloped] {14};

\draw[-Latex] (19.8,-0.3)  -- (15.3,-4.8);
%%  \draw[-Latex] (15.1,-4.6) -- (19.6,-0.1) node [midway, above, sloped] {7};
%%  \draw[-Latex] (19.8,-0.3)  -- (15.3,-4.8) node [midway, below, sloped] {15};


 \end{tikzpicture}
 }
\label{fig:map_ex_chip_optim}
}

\label{fig:optimal_init_place}
\caption{Optimal initial placement}
\end{figure}

#+END_EXPORT


**** Wrong initial placement                                      :ignore:

But in order to show the other steps and the importance of the initial placement, we will do a naive initial placement.
Our naive initial placement will relate the virtual qubits ( $a, b, c$ ...) to the physical ones $Q_0, Q_1, Q_2$ ... in alphabetical order.
Our next step in the mapping flow is to set the initial placement.
So, $a \to Q_0$, $b \to Q_1$, etc.
As shown in Fig. \ref{fig:map_ex_wrong_init}.


#+BEGIN_EXPORT latex

\begin{figure}[H]
\centering
\subfigure[Qubits initialization in a naive way]{
\input{figures/map_ex_circuit_wrong_init}
\label{fig:map_ex_circ_wrong}
}

\subfigure[Qubit disposition in the chip layout]{
\input{figures/map_ex_chip_wrong_init}
\label{fig:map_ex_chip_wrong}
}

\label{fig:map_ex_wrong_init}
\caption{Naive initial placement}
\end{figure}

#+END_EXPORT
     
**** Routing the wrong initial placement                          :ignore:

As for the routing, in order to connect the not NN we insert SWAPs to connect the required qubits.
The mapping brings smartly the qubits close to the next operation qubit as well.
For example, it routes $b$ next to $a$ but also close to $c$, avoiding a path increment for the next operation.
The result can be seen in Fig. \ref{fig:map_ex_routing} as well as its dependence graph after the swap addition.
After every SWAP, the interchanged virtual qubits appear to follow easily the mapping.
The latency after the routing increases in 1440 ns, $1440 + 400 = 1840$ ns.

#+BEGIN_EXPORT latex

\begin{figure}[H]
\centering
\subfigure[Example circuit routed]{

\resizebox{.5\textwidth}{!}{
    \Qcircuit @C=.5em @R=.7em {
\lstick{a \to Q_0} & \qw & \qw & \targ & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qw\\
\lstick{b \to Q_1} & \qswap & \push{d} \qw & \qw & \qw & \qw & \qw & \qw & \qw & \ctrl{2} & \targ & \qw & \qw & \qw & \qw & \qswap & \push{f} \qw & \targ & \qw\\
\lstick{c \to Q_2} & \qw & \qw & \qw & \qswap & \push{f} \qw & \qw & \qw & \qw & \qw & \qw & \qswap & \push{b} \qw & \qw & \qw & \qw & \qw & \qw & \qw\\
\lstick{d \to Q_3} & \qswap \qwx[-2] & \push{b} \qw & \ctrl{-3} & \qw & \qw & \targ & \qswap & \push{c} \qw & \targ & \qw & \qw & \qw & \qswap & \push{f} \qw & \qswap \qwx[-2] & \push{d} \qw & \qw & \qw\\
\lstick{e \to Q_4} & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \ctrl{-3} & \qw & \qw & \qw & \qw & \qw & \qw & \ctrl{-3} & \qw\\
\lstick{f \to Q_5} & \qw & \qw & \qw & \qswap \qwx[-3] & \push{c} \qw & \ctrl{-2} & \qswap \qwx[-2] & \push{b} \qw & \qw & \qw & \qswap \qwx[-3] & \push{f} \qw & \qswap \qwx[-2] & \push{c} \qw & \qw & \qw & \qw & \qw
 }
}

\label{fig:map_ex_circ_route}
}

\subfigure[Dependence graph after routing]{

\resizebox{.75\textwidth}{!}{%
\begin{tikzpicture}
    
    \node [draw, rectangle] (a) at (0,5) {a};
    \node [draw, rectangle] (b) at (0,4) {b};
    \node [draw, rectangle] (c) at (0,3) {c};
    \node [draw, rectangle] (d) at (0,2) {d};
    \node [draw, rectangle] (e) at (0,1) {e};
    \node [draw, rectangle] (f) at (0,0) {f};
    
    \node (swap1) at (2,3) {SWAP b,d};
    \node (swap2) at (2,1.5) {SWAP c,f};
    \node (cnot1) at (4,4.5) {CNOT b,a};
    \node (cnot2) at (6,3) {CNOT c,b};
    \node (swap3) at (8,2.25) {SWAP};
    \node (cnot3) at (10,2.5) {CNOT d,c};
    \node (cnot4) at (12,1.75) {CNOT e,d};
    \node (swap4) at (12,0.5) {SWAP};
    \node (swap5) at (14,1.5) {SWAP};
    \node (swap6) at (16,0.75) {SWAP};
    \node (cnot5) at (18,1.5) {CNOT f,e};
    
    \draw (b) -- (swap1);
    \draw (d) -- (swap1);
    
    \draw (c) -- (swap2);
    \draw (f) -- (swap2);
    
    \draw (a) -- (cnot1);
    \draw (swap1) -- (cnot1) node [midway, above, sloped] {b};
    
    \draw (cnot1) -- (cnot2) node [midway, above, sloped] {b};
    \draw (swap2) -- (cnot2) node [midway, above, sloped] {c};
    
    \draw (cnot2) -- (swap3) node [midway, above, sloped] {b};
    \draw (swap2) -- (swap3) node [midway, above, sloped] {c};
    
    \draw (swap1) -- (cnot3) node [midway, above, sloped] {d};
    \draw (swap3) -- (cnot3) node [midway, above, sloped] {c};
    
    \draw (cnot3) -- (cnot4) node [midway, above, sloped] {d};
    \draw (e) -- (cnot4);
    
    \draw (swap2) -- (swap4) node [midway, above, sloped] {f};
    \draw (swap3) -- (swap4) node [midway, above, sloped] {b};
    
    \draw (cnot3) -- (swap5) node [midway, above, sloped] {c};
    \draw (swap4) -- (swap5) node [midway, above, sloped] {f};
    
    \draw (cnot4) -- (swap6) node [midway, above, sloped] {d};
    \draw (swap5) -- (swap6) node [midway, above, sloped] {f};
    
    \draw (swap6) -- (cnot5) node [midway, above, sloped] {f};
    \draw (cnot4) -- (cnot5) node [midway, above, sloped] {e};
    
\end{tikzpicture}
}

\label{fig:map_ex_depend_resch}
}

\label{fig:map_ex_routing}
\caption{Naive initial placement after routing}
\end{figure}

#+END_EXPORT

**** Re-scheduling the wrong initial placement                    :ignore:

As one could notice in the dependence graph (Fig. \ref{fig:map_ex_depend_resch}), there were several parallel operations.
Therefore, we can apply a scheduling, indeed.
In the Fig. \ref{fig:map_ex_resch} the result of an ASAP scheduling is shown, reducing the latency to 1520 ns.
Note that the dashed boxes enclose all the parallel operations in a cycle.


#+BEGIN_EXPORT latex

\begin{figure}[H]
\centering

\resizebox{.5\textwidth}{!}{
    \Qcircuit @C=.5em @R=.7em {
 \lstick{a \to Q_0} & \qw & \qw & \qw & \qw & \targ & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qw\\
\lstick{b \to Q_1} & \qswap & \push{d} \qw & \qw & \qw & \qw & \qw & \qw & \qw & \ctrl{2} & \targ & \qw & \qw & \qw & \qw & \qswap & \push{f} \qw & \targ & \qw\\
\lstick{c \to Q_2} & \qw & \qw & \qswap & \push{f} \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qswap & \push{b} \qw & \qw & \qw & \qw & \qw & \qw & \qw\\
\lstick{d \to Q_3} & \qswap \qwx[-2] & \push{b} \qw & \qw & \qw & \ctrl{-3} & \targ & \qswap & \push{c} \qw & \targ & \qw & \qw & \qw & \qswap & \push{f} \qw & \qswap \qwx[-2] & \push{d} \qw & \qw & \qw\\
\lstick{e \to Q_4} & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \ctrl{-3} & \qw & \qw & \qw & \qw & \qw & \qw & \ctrl{-3} & \qw\\
\lstick{f \to Q_5} & \qw & \qw & \qswap \qwx[-3] & \push{c} \qw & \qw & \ctrl{-2} & \qswap \qwx[-2] & \push{b} \qw & \qw & \qw & \qswap \qwx[-3] & \push{f} \qw & \qswap \qwx[-2] & \push{c} \qw & \qw & \qw & \qw & \qw \gategroup{1}{2}{6}{5}{.7em}{--} \gategroup{1}{6}{6}{6}{.7em}{--} \gategroup{1}{7}{6}{7}{.7em}{--} \gategroup{1}{8}{6}{9}{.7em}{--} \gategroup{1}{10}{6}{10}{.7em}{--} \gategroup{1}{11}{6}{13}{.7em}{--} \gategroup{1}{14}{6}{15}{.7em}{--} \gategroup{1}{16}{6}{17}{.7em}{--} \gategroup{1}{18}{6}{18}{.7em}{--}
 }
}

\label{fig:map_ex_resch}
\caption{Naive initial placement routed and re-scheduled}
\end{figure}

#+END_EXPORT

**** Optimal approach vs Naive                                    :ignore:

We summary a comparison between the naive and optimal initial placement in terms of number of gates and latency in \ref{fig:optimal_init_place}.


# [FIGURE WITH A QUANTUM CIRCUIT FROM THE EXAMPLE OF THE MAPPING]

          #+BEGIN_EXPORT latex

\begin{figure}
    \centering

\subfigure[Gray encoder quantum circuit]{

\resizebox{0.3\textwidth}{!}{
   \Qcircuit @C=1em @R=.7em {
\lstick{a} & \targ & \qw & \qw & \qw & \qw & \qw\\
\lstick{b} & \ctrl{-1} & \targ & \qw & \qw & \qw & \qw\\
\lstick{c} & \qw & \ctrl{-1} & \targ & \qw & \qw & \qw\\
\lstick{d} & \qw & \qw & \ctrl{-1} & \targ & \qw & \qw\\
\lstick{e} & \qw & \qw & \qw & \ctrl{-1} & \targ & \qw\\
\lstick{f} & \qw & \qw & \qw & \qw & \ctrl{-1} & \qw
}
}

\label{fig:latency_swaps_ex_orig}
}

\subfigure[Mapped Gray encoder for the SC-7 chip. Each circuit part surrounded by a dashed line is a cycle]{

\resizebox{0.4\textwidth}{!}{
    \Qcircuit @C=.5em @R=.7em {
 \lstick{a \to Q_0} & \qw & \qw & \qw & \qw & \targ & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qw\\
\lstick{b \to Q_1} & \qswap & \push{d} \qw & \qw & \qw & \qw & \qw & \qw & \qw & \ctrl{2} & \targ & \qw & \qw & \qw & \qw & \qswap & \push{f} \qw & \targ & \qw\\
\lstick{c \to Q_2} & \qw & \qw & \qswap & \push{f} \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qswap & \push{b} \qw & \qw & \qw & \qw & \qw & \qw & \qw\\
\lstick{d \to Q_3} & \qswap \qwx[-2] & \push{b} \qw & \qw & \qw & \ctrl{-3} & \targ & \qswap & \push{c} \qw & \targ & \qw & \qw & \qw & \qswap & \push{f} \qw & \qswap \qwx[-2] & \push{d} \qw & \qw & \qw\\
\lstick{e \to Q_4} & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \qw & \ctrl{-3} & \qw & \qw & \qw & \qw & \qw & \qw & \ctrl{-3} & \qw\\
\lstick{f \to Q_5} & \qw & \qw & \qswap \qwx[-3] & \push{c} \qw & \qw & \ctrl{-2} & \qswap \qwx[-2] & \push{b} \qw & \qw & \qw & \qswap \qwx[-3] & \push{f} \qw & \qswap \qwx[-2] & \push{c} \qw & \qw & \qw & \qw & \qw \gategroup{1}{2}{6}{5}{.7em}{--} \gategroup{1}{6}{6}{6}{.7em}{--} \gategroup{1}{7}{6}{7}{.7em}{--} \gategroup{1}{8}{6}{9}{.7em}{--} \gategroup{1}{10}{6}{10}{.7em}{--} \gategroup{1}{11}{6}{13}{.7em}{--} \gategroup{1}{14}{6}{15}{.7em}{--} \gategroup{1}{16}{6}{17}{.7em}{--} \gategroup{1}{18}{6}{18}{.7em}{--}
 }
}

\label{fig:latency_swaps_ex_map}
}

\caption{Circuit mapping example}
\label{fig:latency_swaps_ex}
\end{figure}


   #+END_EXPORT

#+caption: Difference between the naive initial placement and the optimal one in terms of number of operations and latency
#+NAME: tab:optima_vs_naive
#+ATTR_LATEX: :booktabs :environment :font :width \textwidth :float t :align ccc
|--------------+------------------+---------------|
|              | Optimal approach | Naive apprach |
|--------------+------------------+---------------|
| # operations | 5                | 11            |
| latency      | 400 ns           | 1520 ns       |
|--------------+------------------+---------------|



# , saving 1120 ns


*** BIB                                                   :ignore:noexport:

bibliography:../thesis_plan.bib
bibliographystyle:plain
